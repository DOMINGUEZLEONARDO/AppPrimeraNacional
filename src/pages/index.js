import Head from "next/head";
import { Inter, Island_Moments } from "next/font/google";
import styles from "@/styles/Home.module.css";
import axios from "axios";
const inter = Inter({ subsets: ["latin"] });
import { useEffect, useState } from "react";
import {
  Container,
  Stack,
  Input,
  Button,
  SimpleGrid,
  Flex,
  Box,
  Modal,
  ModalOverlay,
  ModalHeader,
  ModalBody,
  ModalContent,
  ModalCloseButton,
  useDisclosure,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  List,
  ListItem,
} from "@chakra-ui/react";
import PokemonCard from "@/components/PokemonCard";
import PokemonData from "@/components/PokemonData";

export default function Home() {
  const pokemonDataModal = useDisclosure();

  const [isLoading, setIsLoading] = useState(false);
  const [pokemon, setPokemon] = useState([]);
  const [selectedPokemon, setSelectedPokemon] = useState();
  const [currentPage, setCurrentPage] = useState(0);
  const [catchedPokemons, setCatchedPokemons] = useState();
  

  useEffect(() => {
    setIsLoading(true);
    axios.get(`https://pokeapi.co/api/v2/pokemon/?limit=20&offset=${currentPage*20}`).then(async ({ data }) => {
      const promises = data.results.map((result) => axios(result.url));
      const fetchedPokemon = (await Promise.all(promises)).map(
        (res) => res.data
      );
      setPokemon((prev) => [...prev, ...fetchedPokemon]);
      setIsLoading(false);
    });
  }, [currentPage]);

  useEffect(() => {
    axios.get(`http://localhost:3000/api/catched`).then(async ({ data }) => {
      setCatchedPokemons(data)
    });
  }, [])

  function handleNextPage() {
    setCurrentPage(currentPage+1);
  }

  function handleViewPokemon(pokemon) {
    setSelectedPokemon(pokemon);
    pokemonDataModal.onOpen();
  }

  function addCatchedPokemon(body) {
    setCatchedPokemons([...catchedPokemons, body])
    
  }
  const handleEliminar = async (pokemonId) => {
    try{
      await axios.delete(`http://localhost:3000/api/catched/${pokemonId}`);
      setCatchedPokemons((prevCatched) =>
        prevCatched.filter((pokemon) => pokemon.id !== pokemonId)
      );

    }catch (erro){
      console.error('Error al eliminar el pokemon', error);
    }
    
    
  }

  return (
    <>
      <Head>
        <title>Pokemon Challenge</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Tabs>
        <TabList>
          <Tab>All Pokemons</Tab>
          <Tab>Catched Pokemons</Tab>
        </TabList>

        <TabPanels>
          <TabPanel>
            <Flex alignItems="center" minH="100vh" justifyContent="center">
              <Container maxW="container.lg">
                <Stack p="5" alignItems="center" spacing="5">
                  <SimpleGrid spacing="5" columns={{ base: 1, md: 5 }}>
                    {pokemon.map((pokemon) => (
                      <Box
                        as="button"
                        key={pokemon.id}
                        onClick={() => handleViewPokemon(pokemon)}
                      >
                        <PokemonCard pokemon={pokemon} />
                      </Box>
                    ))}
                  </SimpleGrid>

                  <Button isLoading={false} onClick={handleNextPage}>
                    Cargas m√°s
                  </Button>
                </Stack>
              </Container>
            </Flex>
           <Modal {...pokemonDataModal}>
              <ModalOverlay />
              <ModalContent>
                <ModalHeader textTransform="capitalize">
                  {selectedPokemon?.name}
                </ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                  {selectedPokemon && <PokemonData pokemon={selectedPokemon} addCatchedPokemon={addCatchedPokemon}/>}
                </ModalBody>
              </ModalContent>
            </Modal>
          </TabPanel>
          <TabPanel>
            {/* <Flex alignItems="center" minH="100vh" justifyContent="center">
              <Container maxW="container.lg">
                <Stack p="5" alignItems="center" spacing="5">
                  <SimpleGrid spacing="5" columns={{ base: 1, md: 5 }}>
                    {pokemon.map((pokemon) => (
                      <Box
                        as="button"
                        key={pokemon.id}
                        onClick={() => handleViewPokemon(pokemon)}
                      >
                        <PokemonCard pokemon={pokemon} />
                      </Box>
                    ))}
                  </SimpleGrid>
                </Stack>
              </Container>
            </Flex> */}
            {/* <ul>
              { catchedPokemons && catchedPokemons.map( pokemon => {
                return <li key={pokemon.id}>{pokemon.name}</li>
              } ) }
            </ul> */}
            <List spacing={3}>
              {catchedPokemons && catchedPokemons.map(({name, id}) => (
                <ListItem key={id}>
                  <Box display="flex" justifyContent="space-between" alignItems="center">
                    <Box>{name.toUpperCase()}</Box>
                    <Button colorScheme="red" onClick= {() => handleEliminar(id)}>
                      Eliminar
                    </Button>
                  </Box>
                </ListItem>
              ))}
            </List>
          </TabPanel>
        </TabPanels>
      </Tabs>
      
    </>
  );
}
